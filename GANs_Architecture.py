# -*- coding: utf-8 -*-
"""Generator Architecture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KlvtnrIcktn0eYNFO2dtoY-Tau24FF9p
"""

# Important dependencies
import torch
import torch.nn as nn

# Generator class
class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()

        #First convolution layer
        self.conv1 = nn.Conv2d(1, 128, kernel_size=4, stride=1, padding=0)
        self.bn1 = nn.BatchNorm2d(128)

        #Second convolution layer
        self.conv2 = nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1)
        self.bn2 = nn.BatchNorm2d(256)

        #Third convolution layer
        self.conv3 = nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1)
        self.bn3 = nn.BatchNorm2d(512)

        #Fourth convolution layer
        self.conv4 = nn.Conv2d(512, 1024, kernel_size=4, stride=2, padding=1)
        self.bn4 = nn.BatchNorm2d(1024)

        #Fifth convolution layer
        #Output layer
        self.conv5 = nn.Conv2d(1024, 1, kernel_size=4, stride=2, padding=1)

    # Feed forward Neural Network
    def forward(self, x):
        # Input size must be 1*64*64
        assert x.size() == (x.size(0), 1, 64, 64), "Dimension of input image should be (batch_size, 1, 64, 64)"

        #Forward pass
        x = torch.relu(self.bn1(self.conv1(x)))
        x = torch.relu(self.bn2(self.conv2(x)))
        x = torch.relu(self.bn3(self.conv3(x)))
        x = torch.relu(self.bn4(self.conv4(x)))
        x = torch.tanh(self.conv5(x))
        return x

generator = Generator()
print(generator)

# Discriminator
class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()

        #First transpose convolution layer
        self.tconv1 = nn.ConvTranspose2d(100, 1024, kernel_size=4, stride=1, padding=0)
        self.bn1 = nn.BatchNorm2d(1024)

        #Second transpose convolution layer
        self.tconv2 = nn.ConvTranspose2d(1024, 512, kernel_size=4, stride=2, padding=1)
        self.bn2 = nn.BatchNorm2d(512)

        #Third transpose convolution layer
        self.tconv3 = nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1)
        self.bn3 = nn.BatchNorm2d(256)

        #Fourth transpose convolution layer
        self.tconv4 = nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1)
        self.bn4 = nn.BatchNorm2d(128)

        #Fifth transpose convolution layer
        #Output layer
        self.tconv5 = nn.ConvTranspose2d(128, 1, kernel_size=4, stride=2, padding=1)
    # Feed forward Neural Network
    def forward(self, x):
        # Forward pass
        x = torch.relu(self.bn1(self.tconv1(x)))
        x = torch.relu(self.bn2(self.tconv2(x)))
        x = torch.relu(self.bn3(self.tconv3(x)))
        x = torch.relu(self.bn4(self.tconv4(x)))
        x = torch.tanh(self.tconv5(x))
        return x

discriminator = Discriminator()
print(discriminator)

